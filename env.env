const pool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL || process.env.DATABASE_URL
});
export async function query(text, params) {
  return pool.query(text, params);
}

// File: runmigrations.ts
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import { query } from './neonclient.js';
dotenv.config({ path: './component24.env' });
const migrationsDir = process.env.MIGRATIONS_DIR || './migrations';
const migrationsTable = process.env.MIGRATIONS_TABLE || 'migrations';
async function ensureMigrationsTable() {
  await query(`
    CREATE TABLE IF NOT EXISTS ${migrationsTable} (
      id SERIAL PRIMARY KEY,
      name TEXT UNIQUE NOT NULL,
      run_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
  `);
}
async function getAppliedMigrations() {
  const res = await query(`SELECT name FROM ${migrationsTable};`);
  return res.rows.map(r => r.name);
}
async function applyMigration(file) {
  const filepath = path.join(migrationsDir, file);
  const sql = fs.readFileSync(filepath, 'utf8');
  console.log('Applying', file);
  await query('BEGIN;');
  try {
    await query(sql);
    await query(
      `INSERT INTO ${migrationsTable}(name) VALUES($1);`,
      [file]
    );
    await query('COMMIT;');
  } catch (e) {
    await query('ROLLBACK;');
    console.error('Failed', file, e);
    process.exit(1);
  }
}
async function migrate() {
  await ensureMigrationsTable();
  const applied = await getAppliedMigrations();
  const files = fs
    .readdirSync(migrationsDir)
    .filter(f => f.endsWith('.sql'))
    .sort();
  for (const file of files) {
    if (!applied.includes(file)) {
      await applyMigration(file);
    }
  }
  console.log('All migrations applied');
  process.exit(0);
}
migrate();

// File: authmiddleware.ts
import { verify } from './jwtservice.js';
export function withAuth(handler) {
  return async (event, context) => {
    const auth = event.headers.authorization;
    if (!auth || !auth.startsWith('Bearer ')) {
      return { statusCode: 401, body: JSON.stringify({ success: false, error: 'Unauthorized' }) };
    }
    const token = auth.split(' ')[1];
    try {
      const user = verify(token);
      context.user = user;
      return handler(event, context);
    } catch {
      return { statusCode: 401, body: JSON.stringify({ success: false, error: 'Invalid token' }) };
    }
  };
}

// File: jwtservice.ts
import jwt from 'jsonwebtoken';
const JWT_SECRET = process.env.JWT_SECRET;
if (!JWT_SECRET) throw new Error('JWT_SECRET not set');
export function sign(payload, options) {
  return jwt.sign(payload, JWT_SECRET, options);
}
export function verify(token) {
  return jwt.verify(token, JWT_SECRET);
}

// File: validationschemas.ts
import { z } from 'zod';
export const registerSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  password: z.string().min(6)
});
export const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(6)
});
export const passwordResetRequestSchema = z.object({
  email: z.string().email()
});
export const passwordResetSchema = z.object({
  token: z.string(),
  password: z.string().min(6)
});
export const mapSchema = z.object({
  title: z.string().min(1),
  description: z.string().optional()
});
export const nodeSchema = z.object({
  mapId: z.string().uuid(),
  title: z.string().min(1),
  content: z.string().optional()
});
export const todoSchema = z.object({
  nodeId: z.string().uuid(),
  title: z.string().min(1),
  completed: z.boolean().optional()
});
export const aiGenerateSchema = z.object({
  nodeId: z.string().uuid(),
  prompt: z.string().min(1)
});

// File: responseformatter.ts
export function success(data, statusCode = 200) {
  return {
    statusCode,
    body: JSON.stringify({ success: true, data })
  };
}
export function failure(errorMessage, statusCode = 400) {
  return {
    statusCode,
    body: JSON.stringify({ success: false, error: errorMessage })
  };
}

// File: openaiclient.ts
import OpenAI from 'openai';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
export default openai;

// File: stripeclient.ts
import Stripe from 'stripe';
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2022-11-15' });
export default stripe;

// File: functions/auth/register.ts
import { registerSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { hash } from 'bcryptjs';
import { success, failure } from '../../responseformatter.js';
export const handler = async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { name, email, password } = registerSchema.parse(body);
    const passwordHash = await hash(password, 10);
    const res = await query(
      'INSERT INTO users(id, name, email, password_hash) VALUES (gen_random_uuid(), $1, $2, $3) RETURNING id, name, email, created_at',
      [name, email, passwordHash]
    );
    return success(res.rows[0], 201);
  } catch (e) {
    if (e.code === '23505') return failure('Email already exists', 409);
    if (e.errors) return failure(e.errors, 400);
    return failure(e.message);
  }
};

// File: functions/auth/login.ts
import { loginSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { compare } from 'bcryptjs';
import { sign } from '../../jwtservice.js';
import { success, failure } from '../../responseformatter.js';
export const handler = async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { email, password } = loginSchema.parse(body);
    const res = await query('SELECT id, password_hash, is_admin FROM users WHERE email=$1', [email]);
    const user = res.rows[0];
    if (!user) return failure('Invalid credentials', 401);
    const valid = await compare(password, user.password_hash);
    if (!valid) return failure('Invalid credentials', 401);
    const token = sign({ id: user.id, isAdmin: user.is_admin });
    return success({ token });
  } catch (e) {
    if (e.errors) return failure(e.errors, 400);
    return failure(e.message);
  }
};

// File: functions/auth/passwordreset.ts
import crypto from 'crypto';
import { query } from '../../neonclient.js';
import { passwordResetRequestSchema, passwordResetSchema } from '../../validationschemas.js';
import { hash } from 'bcryptjs';
import { success, failure } from '../../responseformatter.js';
export const handler = async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    if ('email' in body) {
      const { email } = passwordResetRequestSchema.parse(body);
      const token = crypto.randomBytes(32).toString('hex');
      const expiry = new Date(Date.now() + 3600 * 1000).toISOString();
      const res = await query('UPDATE users SET reset_token=$1, reset_token_expires=$2 WHERE email=$3 RETURNING id', [token, expiry, email]);
      if (!res.rows.length) return failure('Email not found', 404);
      return success({ resetToken: token });
    } else {
      const { token, password } = passwordResetSchema.parse(body);
      const now = new Date().toISOString();
      const res = await query('SELECT id FROM users WHERE reset_token=$1 AND reset_token_expires>$2', [token, now]);
      if (!res.rows.length) return failure('Invalid or expired token', 400);
      const passwordHash = await hash(password, 10);
      await query('UPDATE users SET password_hash=$1, reset_token=NULL, reset_token_expires=NULL WHERE id=$2', [passwordHash, res.rows[0].id]);
      return success({ message: 'Password reset successful' });
    }
  } catch (e) {
    if (e.errors) return failure(e.errors, 400);
    return failure(e.message);
  }
};

// File: functions/maps/create.ts
import { withAuth } from '../../authmiddleware.js';
import { mapSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { title, description } = mapSchema.parse(body);
    const res = await query(
      'INSERT INTO maps(id, user_id, title, description) VALUES (gen_random_uuid(), $1, $2, $3) RETURNING *',
      [context.user.id, title, description || null]
    );
    return success(res.rows[0], 201);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/maps/list.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const res = await query('SELECT * FROM maps WHERE user_id=$1', [context.user.id]);
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/maps/get.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query('SELECT * FROM maps WHERE id=$1 AND user_id=$2', [id, context.user.id]);
    if (!res.rows.length) return failure('Not found', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/maps/update.ts
import { withAuth } from '../../authmiddleware.js';
import { mapSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const body = JSON.parse(event.body || '{}');
    const { title, description } = mapSchema.parse(body);
    const res = await query(
      'UPDATE maps SET title=$2, description=$3, updated_at=NOW() WHERE id=$1 AND user_id=$4 RETURNING *',
      [id, title, description || null, context.user.id]
    );
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/maps/delete.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query('DELETE FROM maps WHERE id=$1 AND user_id=$2 RETURNING id', [id, context.user.id]);
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success({ id });
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/nodes/create.ts
import { withAuth } from '../../authmiddleware.js';
import { nodeSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { mapId, title, content } = nodeSchema.parse(body);
    const mapRes = await query('SELECT id FROM maps WHERE id=$1 AND user_id=$2', [mapId, context.user.id]);
    if (!mapRes.rows.length) return failure('Map not found or unauthorized', 404);
    const res = await query(
      'INSERT INTO nodes(id, map_id, title, content) VALUES (gen_random_uuid(), $1, $2, $3) RETURNING *',
      [mapId, title, content || null]
    );
    return success(res.rows[0], 201);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/nodes/list.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const mapId = event.queryStringParameters?.mapId;
    if (!mapId) return failure('Missing mapId', 400);
    const res = await query(
      'SELECT n.* FROM nodes n JOIN maps m ON n.map_id=m.id WHERE n.map_id=$1 AND m.user_id=$2',
      [mapId, context.user.id]
    );
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/nodes/get.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query(
      'SELECT n.* FROM nodes n JOIN maps m ON n.map_id=m.id WHERE n.id=$1 AND m.user_id=$2',
      [id, context.user.id]
    );
    if (!res.rows.length) return failure('Not found', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/nodes/update.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const body = JSON.parse(event.body || '{}');
    const { title, content } = body;
    const fields = [];
    const values = [id, context.user.id];
    let idx = 3;
    if (title !== undefined) { fields.push(`title=$${idx++}`); values.push(title); }
    if (content !== undefined) { fields.push(`content=$${idx++}`); values.push(content); }
    if (!fields.length) return failure('No fields to update', 400);
    const setClause = fields.join(', ') + ', updated_at=NOW()';
    const res = await query(
      `UPDATE nodes n SET ${setClause} FROM maps m WHERE n.map_id=m.id AND n.id=$1 AND m.user_id=$2 RETURNING n.*`,
      values
    );
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/nodes/delete.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query(
      'DELETE FROM nodes USING maps m WHERE nodes.map_id=m.id AND nodes.id=$1 AND m.user_id=$2 RETURNING nodes.id',
      [id, context.user.id]
    );
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success({ id });
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/create.ts
import { withAuth } from '../../authmiddleware.js';
import { todoSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { nodeId, title, completed } = todoSchema.parse(body);
    const nodeRes = await query(
      'SELECT n.id FROM nodes n JOIN maps m ON n.map_id=m.id WHERE n.id=$1 AND m.user_id=$2',
      [nodeId, context.user.id]
    );
    if (!nodeRes.rows.length) return failure('Node not found or unauthorized', 404);
    const res = await query(
      'INSERT INTO todos(id, node_id, title, completed) VALUES (gen_random_uuid(), $1, $2, $3) RETURNING *',
      [nodeId, title, completed || false]
    );
    return success(res.rows[0], 201);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/list.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const nodeId = event.queryStringParameters?.nodeId;
    if (!nodeId) return failure('Missing nodeId', 400);
    const res = await query(
      'SELECT t.* FROM todos t JOIN nodes n ON t.node_id=n.id JOIN maps m ON n.map_id=m.id WHERE t.node_id=$1 AND m.user_id=$2',
      [nodeId, context.user.id]
    );
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/get.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query(
      'SELECT t.* FROM todos t JOIN nodes n ON t.node_id=n.id JOIN maps m ON n.map_id=m.id WHERE t.id=$1 AND m.user_id=$2',
      [id, context.user.id]
    );
    if (!res.rows.length) return failure('Not found', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/update.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const body = JSON.parse(event.body || '{}');
    const title = body.title;
    const completed = body.completed;
    const fields = [];
    const values = [id, context.user.id];
    let idx = 3;
    if (title !== undefined) { fields.push(`title=$${idx++}`); values.push(title); }
    if (completed !== undefined) { fields.push(`completed=$${idx++}`); values.push(completed); }
    if (!fields.length) return failure('No fields to update', 400);
    const setClause = fields.join(', ') + ', updated_at=NOW()';
    const res = await query(
      `UPDATE todos t SET ${setClause} FROM nodes n JOIN maps m ON n.map_id=m.id WHERE t.node_id=n.id AND n.id=t.node_id AND t.id=$1 AND m.user_id=$2 RETURNING t.*`,
      values
    );
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success(res.rows[0]);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/delete.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const id = event.queryStringParameters?.id;
    if (!id) return failure('Missing id', 400);
    const res = await query(
      'DELETE FROM todos t USING nodes n JOIN maps m ON n.map_id=m.id WHERE t.node_id=n.id AND t.id=$1 AND m.user_id=$2 RETURNING t.id',
      [id, context.user.id]
    );
    if (!res.rows.length) return failure('Not found or unauthorized', 404);
    return success({ id });
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/todos/aigenerate.ts
import { withAuth } from '../../authmiddleware.js';
import { aiGenerateSchema } from '../../validationschemas.js';
import { query } from '../../neonclient.js';
import openai from '../../openaiclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  try {
    const body = JSON.parse(event.body || '{}');
    const { nodeId, prompt } = aiGenerateSchema.parse(body);
    const nodeRes = await query(
      'SELECT n.id FROM nodes n JOIN maps m ON n.map_id=m.id WHERE n.id=$1 AND m.user_id=$2',
      [nodeId, context.user.id]
    );
    if (!nodeRes.rows.length) return failure('Node not found or unauthorized', 404);
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }]
    });
    const text = completion.choices[0].message.content;
    const res = await query(
      'INSERT INTO todos(id, node_id, title, completed) VALUES (gen_random_uuid(), $1, $2, false) RETURNING *',
      [nodeId, text]
    );
    return success(res.rows[0], 201);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/webhooks/stripe.ts
import stripe from '../../stripeclient.js';
import { query } from '../../neonclient.js';
export const handler = async (event, context) => {
  const sig = event.headers['stripe-signature'] || event.headers['Stripe-Signature'];
  let evt;
  try {
    evt = stripe.webhooks.constructEvent(event.body || '', sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    return { statusCode: 400, body: `Webhook Error: ${err.message}` };
  }
  const data = evt.data.object;
  if (evt.type === 'checkout.session.completed') {
    const session = data;
    const userId = session.metadata?.userId;
    await query(
      'INSERT INTO payments(id, user_id, amount, currency, status, stripe_session_id) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5)',
      [userId, session.amount_total, session.currency, session.payment_status, session.id]
    );
  } else if (evt.type === 'invoice.payment_failed') {
    const invoice = data;
    const userId = invoice.metadata?.userId;
    await query(
      'INSERT INTO payments(id, user_id, amount, currency, status, stripe_session_id) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5)',
      [userId, invoice.amount_due, invoice.currency, invoice.status, invoice.id]
    );
  }
  return { statusCode: 200, body: 'ok' };
};

// File: functions/admin/users.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  if (!context.user.isAdmin) return failure('Forbidden', 403);
  try {
    const res = await query('SELECT id, name, email, is_admin, created_at FROM users');
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/admin/payments.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  if (!context.user.isAdmin) return failure('Forbidden', 403);
  try {
    const res = await query('SELECT * FROM payments');
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/admin/analytics.ts
import { withAuth } from '../../authmiddleware.js';
import { query } from '../../neonclient.js';
import { success, failure } from '../../responseformatter.js';
export const handler = withAuth(async (event, context) => {
  if (!context.user.isAdmin) return failure('Forbidden', 403);
  try {
    const res = await query('SELECT * FROM analytics');
    return success(res.rows);
  } catch (e) {
    return failure(e.message);
  }
});

// File: functions/healthcheck.ts
export const handler = async (event, context) => {
  return {
    statusCode: 200,
    body: JSON.stringify({ status: 'ok' })
  };
};

// File: netlify.toml
[build]
  functions = "functions"
  command = "npm run migrate"
[dev]
  functions = "functions"
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

// File: package.json
{
  "name": "netlify-functions-backend",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "migrate": "ts-node runmigrations.ts",
    "start": "netlify dev"
  },
  "dependencies": {
    "pg": "^8.11.0",
    "dotenv": "^16.0.0",
    "zod": "^3.20.2",
    "jsonwebtoken": "^8.5.1",
    "stripe": "^11.18.0",
    "openai": "^4.5.0",
    "bcryptjs": "^2.4.3",
    "@netlify/functions": "^1.5.0"
  },
  "devDependencies": {
    "ts-node": "^10.9.1"
  }
}

// File: vite.config.ts
import { defineConfig } from 'vite';
export default defineConfig({});

// File: vite.config.js
import { defineConfig } from 'vite';
export default defineConfig({});

// File: component24.env
DATABASE_URL=postgresql://<USERNAME>:<PASSWORD>@<HOST>:<PORT>/<DATABASE>?sslmode=require
NEON_DATABASE_URL=${DATABASE_URL}
JWT_SECRET=<YOUR_GENERATED_JWT_SECRET>
SESSION_SECRET=<YOUR_GENERATED_SESSION_SECRET>
OPENAI_API_KEY=<YOUR_OPENAI_API_KEY>
STRIPE_SECRET_KEY=<YOUR_STRIPE_SECRET_KEY>
STRIPE_WEBHOOK_SECRET=<YOUR_STRIPE_WEBHOOK_SECRET>
NETLIFY_AUTH_TOKEN=<YOUR_DEPLOY_ONLY_NETLIFY_AUTH_TOKEN>
NETLIFY_SITE_ID=<YOUR_NETLIFY_SITE_ID>
SITE_URL=https://<YOUR_SITE>.netlify.app
CORS_ORIGINS=http://localhost:8888,https://<YOUR_SITE>.netlify.app
LOG_LEVEL=info
NODE_ENV=development
MIGRATIONS_TABLE=migrations
MIGRATIONS_DIR=./migrations

// File: .env.example.env
DATABASE_URL=postgresql://__USERNAME__:@__HOST__:/__PORT__/__DATABASE__?sslmode=require
NEON_DATABASE_URL=${DATABASE_URL}
JWT_SECRET=__JWT_SECRET__
SESSION_SECRET=__SESSION_SECRET__
OPENAI_API_KEY=__OPENAI_API_KEY__
STRIPE_SECRET_KEY=__STRIPE_SECRET_KEY__
STRIPE_WEBHOOK_SECRET=__STRIPE_WEBHOOK_SECRET__
NETLIFY_AUTH_TOKEN=__NETLIFY_AUTH_TOKEN__
NETLIFY_SITE_ID=__NETLIFY_SITE_ID__
SITE_URL=https://__YOUR_SITE__.netlify.app
CORS_ORIGINS=http://localhost:8888,https://__YOUR_SITE__.netlify.app
LOG_LEVEL=info
NODE_ENV=development
MIGRATIONS_TABLE=migrations
MIGRATIONS_DIR=./migrations